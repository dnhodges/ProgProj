/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
import java.util.Vector;
import java.io.StringReader;

public class SQLParser implements SQLParserConstants {
    public static void main(String args[]) throws ParseException {
        ParsedStatement ps;
        ps = Parse("CREATE TABLE S (i integer PRIMARY KEY, j integer);");
        ps.print();

        if( (ps = Parse("SELECT a, b FROM S;")) != null) {
            ps.print();
        } else {
            System.out.println("Parse Error");
        }

        ps = Parse("SELECT DISTINCT a, b FROM S ORDER BY S.a;");
        ps.print();

        ps = Parse("INSERT INTO S VALUES(1, 2);");
        ps.print();
    }

    public static ParsedStatement Parse(String s) {
        try {
            ParsedStatement ps = new ParsedStatement();
            SQLParser cvp = new SQLParser(new StringReader(s));
            cvp.Input(ps);
            return ps;
        } catch (TokenMgrError e) {
            System.out.println(e);
            e.printStackTrace();
            return null;
        } catch (Exception e) {
            System.out.println("ParseException... try again");
            e.printStackTrace();
            return null;
        }
    }

  final public void Input(ParsedStatement ps) throws ParseException {
    if (jj_2_1(3)) {
      CreateTableStatement(ps);
      jj_consume_token(0);
    } else if (jj_2_2(3)) {
      InsertValuesStatement(ps);
      jj_consume_token(0);
    } else if (jj_2_3(3)) {
      QueryStatement(ps);
      jj_consume_token(0);
    } else if (jj_2_4(3)) {
      DropTableStatement(ps);
      jj_consume_token(0);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DropTableStatement(ParsedStatement ps) throws ParseException {
    Token t;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    t = jj_consume_token(ID);
    jj_consume_token(24);
      ps.initDropTable(t.image);
  }

  final public void CreateTableStatement(ParsedStatement ps) throws ParseException {
    Token t;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    t = jj_consume_token(ID);
    jj_consume_token(25);
    TableAttribute(ps, true);
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    label_1:
    while (true) {
      if (jj_2_5(3)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(26);
      TableAttribute(ps, false);
    }
    jj_consume_token(27);
    jj_consume_token(24);
      ps.initCreateTable(t.image);
  }

  final public void TableAttribute(ParsedStatement ps, boolean isprimarykey) throws ParseException {
    Token t1, t2;
    t1 = jj_consume_token(ID);
    t2 = jj_consume_token(ID);
        ps.addTableAttribute(t1.image, t2.image, isprimarykey);
  }

  final public void InsertValuesStatement(ParsedStatement ps) throws ParseException {
    Token t;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    t = jj_consume_token(ID);
    jj_consume_token(VALUES);
    jj_consume_token(25);
    AttributeValue(ps);
    label_2:
    while (true) {
      if (jj_2_6(3)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(26);
      AttributeValue(ps);
    }
    jj_consume_token(27);
    jj_consume_token(24);
      ps.initInsertValues(t.image);
  }

  final public void AttributeValue(ParsedStatement ps) throws ParseException {
    Token t;
    if (jj_2_7(3)) {
      t = jj_consume_token(TEXT);
        ps.addStringAttributeValue(t.image);
    } else if (jj_2_8(3)) {
      t = jj_consume_token(NUM);
        ps.addNumberAttributeValue(t.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void QueryStatement(ParsedStatement ps) throws ParseException {
    if (jj_2_9(3)) {
      jj_consume_token(SELECT);
      SelectClause(ps);
      FromList(ps);
      WhereOrderByClause(ps);
      ps.initQuery();
    } else if (jj_2_10(3)) {
      jj_consume_token(SELECT);
      jj_consume_token(DISTINCT);
      SelectClause(ps);
      FromList(ps);
      WhereOrderByClause(ps);
      ps.initQueryDistinct();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WhereOrderByClause(ParsedStatement ps) throws ParseException {
    if (jj_2_12(3)) {
      jj_consume_token(24);
    } else if (jj_2_13(3)) {
      jj_consume_token(WHERE);
      Predicate(ps);
      label_3:
      while (true) {
        if (jj_2_11(3)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(AND);
        Predicate(ps);
      }
      OrderByClause(ps);
    } else if (jj_2_14(3)) {
      OrderByClause(ps);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SelectClause(ParsedStatement ps) throws ParseException {
    if (jj_2_16(3)) {
      SelectTupleAttribute(ps);
      label_4:
      while (true) {
        if (jj_2_15(3)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(26);
        SelectTupleAttribute(ps);
      }
    } else if (jj_2_17(3)) {
      jj_consume_token(28);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FromList(ParsedStatement ps) throws ParseException {
    jj_consume_token(FROM);
    TableName(ps);
    label_5:
    while (true) {
      if (jj_2_18(3)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(26);
      TableName(ps);
    }
  }

  final public void OrderByClause(ParsedStatement ps) throws ParseException {
    if (jj_2_20(3)) {
      jj_consume_token(24);
    } else if (jj_2_21(3)) {
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      OrderByTupleAttribute(ps);
      label_6:
      while (true) {
        if (jj_2_19(3)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(26);
        OrderByTupleAttribute(ps);
      }
      jj_consume_token(24);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TableName(ParsedStatement ps) throws ParseException {
    Token t;
    t = jj_consume_token(ID);
        ps.addQueryTable(t.image);
  }

  final public void Predicate(ParsedStatement ps) throws ParseException {
    Token t1, t2, t3, t4;
    Predicate pr = new Predicate();
    TupleAttribute(ps, pr);
    jj_consume_token(29);
    RHS(ps, pr);
        ps.addPredicate(pr);
  }

  final public void RHS(ParsedStatement ps, Predicate pr) throws ParseException {
    Token t1, t2;
    if (jj_2_22(3)) {
      TupleAttribute(ps, pr);
    } else if (jj_2_23(3)) {
      t1 = jj_consume_token(TEXT);
        pr.addVariable(new Constant(t1.image));
    } else if (jj_2_24(3)) {
      t1 = jj_consume_token(NUM);
        pr.addVariable(new Constant(new Integer(t1.image)));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TupleAttribute(ParsedStatement ps, Predicate pr) throws ParseException {
    Token t1, t2;
    if (jj_2_25(3)) {
      t1 = jj_consume_token(ID);
      jj_consume_token(DOT);
      t2 = jj_consume_token(ID);
        pr.addVariable(new TupleAttribute(t1.image, t2.image));
    } else if (jj_2_26(3)) {
      t2 = jj_consume_token(ID);
        pr.addVariable(new TupleAttribute(null, t2.image));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SelectTupleAttribute(ParsedStatement ps) throws ParseException {
    Token t1, t2;
    if (jj_2_27(4)) {
      t1 = jj_consume_token(ID);
      jj_consume_token(DOT);
      t2 = jj_consume_token(ID);
        ps.addSelectVariable(new TupleAttribute(t1.image, t2.image));
    } else if (jj_2_28(3)) {
      t2 = jj_consume_token(ID);
        ps.addSelectVariable(new TupleAttribute(null, t2.image));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OrderByTupleAttribute(ParsedStatement ps) throws ParseException {
    Token t1, t2;
    if (jj_2_29(4)) {
      t1 = jj_consume_token(ID);
      jj_consume_token(DOT);
      t2 = jj_consume_token(ID);
        ps.addOrderByAttribute(new TupleAttribute(t1.image, t2.image));
    } else if (jj_2_30(3)) {
      t2 = jj_consume_token(ID);
        ps.addOrderByAttribute(new TupleAttribute(null, t2.image));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_3_26() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_scan_token(DISTINCT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(TABLE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TABLE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
